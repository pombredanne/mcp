#
# Copyright (c) 2009 rPath, Inc.
#
# All rights reserved.
#

from rmake.lib import apirpc
from rmake.lib import server
from rmake.lib.apiutils import api, api_parameters, api_return
from mcp.messagebus import bus_node
from mcp.messagebus import messages
from mcp.messagebus import nodetypes


class DispatcherNode(bus_node.BusNode):
    nodeType = nodetypes.DispatcherNodeType
    sessionClass = 'image_dispatcher'
    subscriptions = [
            '/register?nodeType=%s' % nodetypes.MasterNodeType.nodeType,
            '/register?nodeType=%s' % nodetypes.DispatcherNodeType.nodeType,
            '/internal/nodes',
            '/image_command',
            '/image_event',
            ]

    def onStart(self):
        # Reset all master nodes on dispatcher startup.
        msg = messages.ResetCommand()
        self.bus.sendMessage('/image_command', msg)

    def handleRegisterNodeMessage(self, msg):
        if not isinstance(msg.payload.node, nodetypes.MasterNodeType):
            return
        self.server.nodeStatus(msg.headers.sessionId, msg.payload.node)

    def handleNodeStatus(self, msg):
        if msg.headers.status == 'DISCONNECTED':
            self.server.nodeLeft(msg.headers.statusId)

    def handleMasterStatusMessage(self, msg):
        self.server.nodeStatus(msg.headers.sessionId, msg.payload.node)


class DispatcherServer(apirpc.ApiServer):
    def __init__(self):
        server.Server.__init__(self)
        self.busNode = DispatcherNode(('localhost', 50900), server=self)
        self.queuedJobs = []
        self.runningJobs = {}
        self.nodes = {}

    def handleRequestIfReady(self, sleepTime=0.1):
        self.busNode.handleRequestIfReady(sleepTime)

    def nodeStatus(self, sessionId, node):
        if sessionId not in self.nodes:
            self.info("Worker node %s (%s) connected.", node.name, sessionId)
        self.nodes[sessionId] = node
        self.info("%s (%s) : %d/%d slots used  Load %.2f %.2f %.2f", node.name,
                sessionId, len(node.jobs), node.slots, *node.nodeInfo.loadavg)

    def nodeLeft(self, sessionId):
        if sessionId not in self.nodes:
            return
        print sessionId, 'left the party'

    @api(version=1)
    @api_parameters(1)
    @api_return(1, None)
    def listNodes(self):
        return []


if __name__ == '__main__':
    DispatcherServer().serve_forever()
